---
syntax: bash
tags: [ bitcoin ]
---

# Address types

## Mainnet
P2PKH: 1
P2SH/Wrapped-Segwit: 3
Bech32/Native-Segwit: bc1q
Bech32m/Taproot: bc1p

## Testnet
P2PKH: n
P2SH/Wrapped-Segwit: 2
Bech32/Native-Segwit: tb1q
Bech32m/Taproot: tb1p

## Regtest
P2PKH: m
P2SH/Wrapped-Segwit: 2
Bech32/Native-Segwit: bcrt
Bech32m/Taproot: TODO

# Script

## Flow
The unlocking script (scriptSig) will be executed first. Then the locking script (scriptPubKey) will be executed.
<UNLOCKING SCRIPT> <LOCKING SCRIPT>

The script is valid if a non-zero number is on top of the stack.
The script is invalid if 0 is left on top of the stack or the stack is empty.

## Standard locking-scripts
P2PK: <PUBKEY> OP_CHECKSIG
P2PKH: OP_DUP OP_HASH160 <PUBKEYHASH> OP_EQUALVERIFY OP_CHECKSIG
P2MS: <M> <PUBKEY>... <N> CHECKMULTISIG (m of n)
P2SH: OP_HASH160 <SCRIPTHASH> OP_EQUAL
P2WPKH: TODO
P2WSH: TODO
P2TR: TODO
NULLDATA: OP_RETURN <DATA>

## Operators

### Stack
OP_DUP
OP_IFDUP
OP_DROP
OP_PICK

### Bitwise Logic
OP_AND
OP_OR
OP_XOR
OP_EQUAL
OP_EQUALVERIFY

### Flow control
OP_IF
OP_ELSE
OP_ENDIF
OP_VERIFY
OP_RETURN

### Locktime
OP_CHECKLOCKTIMEVERIFY
OP_CHECKSEQUENCEVERIFY

### Crypto
OP_RIPEMD160
OP_SHA256
OP_HASH160
OP_HASH256
OP_CHECKSIG
OP_CHECKSIGVERIFY
OP_CHECKMULTISIG
OP_CHECKMULTISIGVERIFY

## Links
https://en.bitcoin.it/wiki/Transaction
https://en.bitcoin.it/wiki/Script
https://en.bitcoin.it/wiki/OP_CHECKSIG
https://learnmeabitcoin.com/technical/script

# Keys

# Addresses

# Mining

# RBF

# Timelocks

|                           | Absolute Timelock   | Relative Timelock   |
|---------------------------|---------------------|---------------------|
| Transaction Level         | nLockTime           | nSequence           |
| UTXO Level (Script Level) | CheckLockTimeVerify | CheckSequenceVerify |

## Absolute Timelock
The locktime will be set in an absolute way by either block height or by the time (Unix timestamp).

nLockTime = 0: Transaction can be added into a block and be appended to the blockchain immediately
nLockTime < 500,000,000: Block height
nLockTime > 500,000,000: Unix timestamp

CheckLockTimeVerify (CLTV) was added to Bitcoin by a soft fork in December 2015, based on BIP65.
The difference to nLockTime is that CLTV restricts the UTXO to be spendable only after the specified time/blocks has elapsed/been generated, while nLockTime 
limits the transaction to be valid and can be added to the block / blockchain after certain amount of time.
When the CLTV opcode is called, it will cause the script to fail unless the nLockTime on the transaction is equal to or greater than the time parameter provided to the CLTV opcode.

## Sequence Numbers
nSequence is used as an opt-in mechanism for absolute timelock, relative timelock and rbf. In order to use absolute timelock, you need to set the nSequence value.

nSequence between 0 and 2,147,483,647: Enables relative timelock, absolute timelock and RBF
nSequence between 2,147,483,648 and 4,294,967,293: Enables RBF and absolute timelock
nSequence = 4,294,967,294: Preferred value for absolute timelock (disables RBF and relative timelock)
nSequence < 4,294,967,294: Enables RBF (preferred value is 1)
nSequence < 4,026,531,840: Enables relative timelock

## Relative Timelock
The relative timelock can also be presented by either block height or by the time. 
If the timelock is interpreted as the block height, the timelock will be like after x blocks. 
If it is interpreted as the time, it will be set as after x seconds.

The relative timelocks were activated at May 2016 as a soft fork upgrade, based on BIP68, BIP112 and BIP113.
Relative timelocks are much more flexible, resticting transactions/UTXOs to be valid/spendable after the relative time has elapsed, based on the time 
that the parent blocks or transactions to be added on the blockchain.

CheckSequenceVerify (CSV) provides for relative locktime the same feature CLTV provides for absolute locktime.
It specifies how long an output must be part of the blockchain before an input spending it may be added to the blockchain.
CheckSequenceVerify allows locking for at most 65535 blocks (about 455 days) or for at most 65535*512 seconds (about 388 days).

## Transaction Level
Defines the earliest time that the transaction can be added into the blockchain. This allows the signer to create a transaction, which will only be valid in the future.

## UTXO or Script Level
This kind of timelock will be added into the script of the UTXO, instead of being a field of the transaction. 
It allows the UTXO to be spendable only after the specified time/blocks have elapsed/been generated.

## Links
https://en.bitcoin.it/wiki/Timelock
https://github.com/BlockchainCommons/Learning-Bitcoin-from-the-Command-Line/blob/master/08_1_Sending_a_Transaction_with_a_Locktime.md

# Units

## Size in bytes
The size in [bytes] of a transaction refers to the raw byte length of its serialized format. 
It is used to measure the data footprint of transactions when relayed on the network or stored on disk.

## Size in vbytes
The vsize in [vbytes] refers to a transaction's weighted size under segwit's rules. 
It is used to compare how much blockweight needs to be allocated to confirm a transaction.

vsize [vB] = weight [wu] / 4

## Weight
The transaction size was measured in bytes before segwit. Since segwit, the relevant measure is transaction weight 
which is either given in virtualbytes (vbyte, vB) or weight units (wu) where 4 wu = 1 vB.
For segwit transactions, which do include witness data, the resulting transaction weight is strictly smaller than 4 Ã— size due to the witness bytes contributing at a lower factor. 
For non-segwit transactions, their size is equal to their virtualsize 1 B = 1 vB.

## Links
https://bitcoin.stackexchange.com/questions/89385/is-there-a-difference-between-bytes-and-virtual-bytes-vbytes
https://bitcoin.stackexchange.com/questions/84004/how-do-virtual-size-stripped-size-and-raw-size-compare-between-legacy-address-f/84006#84006
